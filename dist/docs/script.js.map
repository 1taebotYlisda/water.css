{"version":3,"sources":["script.js"],"names":["w","window","queryParams","URLSearchParams","location","search","supportsCssVars","CSS","supports","CDN_BASE","FILE_SIZES","dark.min.css","dark.standalone.min.css","dark-legacy.min.css","dark-legacy.standalone.min.css","light.min.css","light.standalone.min.css","light-legacy.min.css","light-legacy.standalone.min.css","getFileName","_ref","theme","legacySuffix","isLegacy","standaloneExt","isStandalone","concat","getFileSnippet","_ref3","fileName","stylesheetSnippet","_ref2","alternativeTheme","alternativeFile","getFilePreloadSnippet","trim","externalElements","_productHunt","document","querySelector","_stylesheet","_removeStartupStylesheet","startupStylesheet","head","removeChild","that","removeEventListener","_updateProductHunt","this","src","replace","_updateStylesheet","href","init","options","preferedTheme","addEventListener","update","displayedTheme","createColorSchemeListener","scheme","queryHandler","mediaQuery","matchMedia","addListener","query","matches","themeFromParams","get","initialVersionOptions","has","Vue","el","filters","capitalize","str","charAt","toUpperCase","slice","data","versionOptions","preferedColorScheme","copyStatus","computed","isOverwritten","_this$versionOptions","selectedVersion","fileSize","toFixed","fileSnippet","created","_this","match","methods","getTooltipMessage","copyToClipboard","_this2","Promise","resolve","then","clipboard","writeText","setTimeout","watch","nextScheme","deep","handler","nextOptions"],"mappings":"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","file":"script.js","sourcesContent":["// @ts-check\n/** @typedef {'dark' | 'light'} Theme */\n/** @typedef {keyof typeof FILE_SIZES} FileName */\n/** @typedef {'success' | 'failed'} CopyStatus */\n/**\n * @typedef {Object} VersionOptions Configurable options for water.css versions\n * @prop {Theme} theme\n * @prop {boolean} isLegacy\n * @prop {boolean} isStandalone\n */\n/**\n * @typedef {Object} Libraries External packages exposed on `window` (loaded through `<script>`)\n * @prop {typeof import('vue').default} Vue\n * @prop {Clipboard} clipboard\n * @prop {import('favicon-mode-switcher')} faviconModeSwitcher\n */\n/**\n * @typedef {Object} VueData State used by the version picker\n * @prop {VersionOptions} versionOptions\n * @prop {?CopyStatus} copyStatus\n * @prop {?Theme} preferedColorScheme\n */\n\n/** Reference to global window, but with properties for loaded libraries. */\nconst w = /** @type {Window & Libraries} */ (window)\nconst queryParams = new URLSearchParams(w.location.search)\nconst supportsCssVars = typeof CSS !== 'undefined' && CSS.supports('color', 'var(--clr)')\n\n/** The base URI from where the docs page loads the CSS files. */\nconst DEV_BASE = './water.css/'\n/** The base URI from where instructions show to load the CSS files. */\nconst CDN_BASE = 'https://cdn.jsdelivr.net/gh/kognise/water.css/dist/'\n\n/** An object mapping the (minified + gzipped) fileSize in KB to a fileName. */\nconst FILE_SIZES = {\n  'dark.min.css': 1.4,\n  'dark.standalone.min.css': 1.31,\n  'dark-legacy.min.css': 0.177 + 1.16 + 1.15,\n  'dark-legacy.standalone.min.css': 1.16,\n  'light.min.css': 1.4,\n  'light.standalone.min.css': 1.3,\n  'light-legacy.min.css': 0.178 + 1.16 + 1.15,\n  'light-legacy.standalone.min.css': 1.15,\n}\n\n/** Takes in version options and returns the respective CSS file name. */\nconst getFileName = (/** @type {VersionOptions} */ { theme, isLegacy, isStandalone }) => {\n  const legacySuffix = isLegacy ? '-legacy' : ''\n  const standaloneExt = isStandalone ? '.standalone' : ''\n  return /** @type {FileName} */ (`${theme}${legacySuffix}${standaloneExt}.min.css`)\n}\n\n/** Takes in version options and returns the corresponding file size in KB. */\nconst getFileSize = (/** @type {VersionOptions} */ options) => FILE_SIZES[getFileName(options)] || 0\n\n/** Takes in version options and returns an HTML snippet that preloads the main stylesheet and\n *  conditionally preloads the alternative stylesheet (if the alternative theme is active). */\nconst getFilePreloadSnippet = (/** @type {VersionOptions} */ { theme, isLegacy, isStandalone }) => {\n  const alternativeTheme = theme === 'dark' ? 'light' : 'dark'\n  const alternativeFile = getFileName({ theme: alternativeTheme, isLegacy, isStandalone })\n\n  return `\n<!-- Preload the required stylesheets (optional) -->\n<link rel=\"preload\" as=\"style\" href=\"${CDN_BASE}${getFileName({ theme, isLegacy, isStandalone })}\">\n<link rel=\"preload\" as=\"style\" href=\"${CDN_BASE}${alternativeFile}\" media=\"(prefers-color-scheme: ${alternativeTheme})\">`\n}\n\n/** Takes in version options and returns the code snippet instructing users how to load the file. */\nconst getFileSnippet = (/** @type {VersionOptions} */ { theme, isLegacy, isStandalone }) => {\n  const fileName = getFileName({ theme, isLegacy, isStandalone })\n  const stylesheetSnippet = `<link rel=\"stylesheet\" href=\"${CDN_BASE}${fileName}\">`\n\n  if (!isLegacy || isStandalone) return stylesheetSnippet\n\n  const preloadSnippet = getFilePreloadSnippet({ theme, isLegacy, isStandalone: true })\n  return (preloadSnippet + '\\n\\n' + stylesheetSnippet).trim()\n}\n\n/** Handles elements external to the version picker that still need to be kept\n *  up to date with the current version, e.g. switching images from dark to light. */\nconst externalElements = {\n  _productHunt: /** @type {HTMLImageElement} */ (document.querySelector('#js-producthunt')),\n  _stylesheet: /** @type {HTMLLinkElement} */ (document.querySelector('#js-stylesheet')),\n  _removeStartupStylesheet() {\n    const startupStylesheet = document.head.querySelector('#js-startup-stylesheet')\n    if (startupStylesheet) document.head.removeChild(startupStylesheet)\n    const that = externalElements\n    that._stylesheet.removeEventListener('load', that._removeStartupStylesheet)\n  },\n  _updateProductHunt(/** @type {Theme} */ theme) {\n    this._productHunt.src = this._productHunt.src.replace(/dark|light/, theme)\n  },\n  _updateStylesheet(/** @type {FileName} */ fileName) {\n    this._stylesheet.href = DEV_BASE + fileName\n  },\n\n  /** Sets up listener to remove startup version of water.css when right one loads, then updates */\n  init(/** @type {VersionOptions} */ options, /** @type {?Theme} */ preferedTheme) {\n    this._stylesheet.addEventListener('load', this._removeStartupStylesheet)\n    this.update(options, preferedTheme)\n  },\n  /** Takes current version + the user's prefered scheme and updates all external elements. */\n  update(/** @type {VersionOptions} */ options, /** @type {?Theme} */ preferedTheme) {\n    const displayedTheme = options.isStandalone ? options.theme : preferedTheme || options.theme\n\n    this._updateStylesheet(getFileName(options))\n    this._updateProductHunt(displayedTheme)\n  },\n}\n\n/**\n * Sets up a media query for the given color scheme and runs the callback on change.\n * @param {Theme} scheme\n * @param {(matches: boolean) => any} queryHandler\n */\nconst createColorSchemeListener = (scheme, queryHandler) => {\n  const mediaQuery = w.matchMedia(`(prefers-color-scheme: ${scheme})`)\n  mediaQuery.addListener(query => queryHandler(query.matches))\n  queryHandler(mediaQuery.matches)\n}\n\nconst themeFromParams = queryParams.get('theme')\n/** @type {VersionOptions} */\nconst initialVersionOptions = {\n  theme: themeFromParams === 'dark' || themeFromParams === 'light' ? themeFromParams : 'dark',\n  isLegacy: queryParams.has('legacy') || !supportsCssVars,\n  isStandalone: queryParams.has('standalone'),\n}\n\nnew w.Vue({\n  el: '#installation',\n  filters: {\n    capitalize: (/** @type {string} */ str) => str.charAt(0).toUpperCase() + str.slice(1),\n  },\n  /** @type {VueData} */\n  data: {\n    versionOptions: initialVersionOptions,\n    preferedColorScheme: null,\n    copyStatus: null,\n  },\n  computed: {\n    /** @returns {boolean} */\n    isOverwritten() {\n      const { isStandalone, theme } = this.versionOptions\n      if (isStandalone || !this.preferedColorScheme) return false\n      return theme !== this.preferedColorScheme\n    },\n    /** @returns {{ fileName: string, fileSize: string, fileSnippet: string }} */\n    selectedVersion() {\n      return {\n        fileName: getFileName(this.versionOptions),\n        fileSize: getFileSize(this.versionOptions).toFixed(2),\n        fileSnippet: getFileSnippet(this.versionOptions),\n      }\n    },\n  },\n  created() {\n    createColorSchemeListener('dark', match => match && (this.preferedColorScheme = 'dark'))\n    createColorSchemeListener('light', match => match && (this.preferedColorScheme = 'light'))\n\n    externalElements.init(this.versionOptions, this.preferedColorScheme)\n  },\n  methods: {\n    getTooltipMessage(/** @type {Theme} */ theme) {\n      if (this.versionOptions.theme === theme && this.isOverwritten) {\n        return 'Your theme selection is currently overwritten by the theme setting on your device.'\n      } else return \"Selected theme can be overwritten by theme setting on user's device.\"\n    },\n    copyToClipboard() {\n      Promise.resolve()\n        .then(() => w.clipboard.writeText(this.selectedVersion.fileSnippet))\n        .then(() => (this.copyStatus = 'success'))\n        .catch(() => (this.copyStatus = 'failed'))\n      setTimeout(() => (this.copyStatus = null), 1000)\n    },\n  },\n  watch: {\n    preferedColorScheme(/** @type {Theme} */ nextScheme) {\n      externalElements.update(this.versionOptions, nextScheme)\n    },\n    versionOptions: {\n      deep: true,\n      handler(/** @type {VersionOptions} */ nextOptions) {\n        externalElements.update(nextOptions, this.preferedColorScheme)\n      },\n    },\n  },\n})\n"]}